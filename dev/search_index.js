var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section provides detailed documentation for all exported types and functions in SeededAlignment.jl.","category":"page"},{"location":"api/#Core-Methods","page":"API Reference","title":"Core Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"seed_chain_align\nmsa_codon_align \nclean_frameshifts\nnw_align","category":"page"},{"location":"api/#Utilities","page":"API Reference","title":"Utilities","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"methods for reading and writing of sequence data in FASTA format.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"read_fasta\nwrite_fasta","category":"page"},{"location":"api/#Core-Types","page":"API Reference","title":"Core Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Move\nMoveset\nScoringScheme\n[LongDNA{4}] - Array specialized for DNA from BioSequences.jl","category":"page"},{"location":"api/#Standard-Parameters","page":"API Reference","title":"Standard Parameters","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"STD_SCORING\nSTD_CODON_MOVESET\nSTD_NOISY_MOVESET","category":"page"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"A complete alphabetical listing of all documented functions.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#Index-Docstrings","page":"API Reference","title":"Index Docstrings","text":"","category":"section"},{"location":"api/#SeededAlignment.Move","page":"API Reference","title":"SeededAlignment.Move","text":"Move(ref::Bool, step_length::Int64, score::Float64, extendable::Float64)\n\nRepresents a gap move during alignment. The Move instance represents either an insertion or deletion depending on how it is passed to the Moveset instance - collection of Move instances used in alignment methods. \n\nFor example, if Move.step_length = 3 then that represents a gap of length 3 (either insertion or deletion). \n\nExtended Help\n\nFields\n\n-ref::Bool: Whether move respects the coding reading frame -step_length::Int64: Length of gap in alignment (must be  1,2 or 3) -score::Float64: penalty for using the move - cost of adding the gaps to the alignment (must be < 0) -extendable::Bool: Whether the move can be affinely extended by another move. \n\nConstructors\n\n-Move(; ref=false::Bool, step_length::Int64, score::Float64, extendable=false): keyword constructor for more easily constructing Moves. Has some default values but requires at least step_length and score to be provided. \n\n-RefMove(; score::Float64):  Constructor for a Move that respect coding reading frame. Only requires score argument.  Returns: Move(ref=true, step_length=3, score=score, extendable=true)\n\n-FrameshiftMove(; step_length::Int64, score::Float64, extendable::Bool=false):  Constructor for a Move that cause frameshifts and breaks reading frame symmetry. Requires arguments step_length, score, and extendable. Returns: Move(ref=false, step_length=step_length, score=score, extendable=extendable)\n\nExamples\n\ncodon moveset with no frameshifts\n\n# represents codon insertion or codon deletion\ncodon_indel = RefMove(score=1.0)\n#= passing to moveset solidifies what the allowed alignment operations are,\nnamely single codon insertions and deletions. \n=#\nMoveset(ref_insertions = (codon_indel,), ref_deletions = (codon_indel,))\n\ncodon moveset with frameshift moves allowed\n\n# represents codon insertion or codon deletion\ncodon_indel = RefMove(score=-1.0)\n# represents frameshift causing insertion or deletion\nfrm_indel = FrameshiftMove(score=-1.5, step_length=1, extendable=true)\n#= passing to moveset solidifies what the allowed alignment operations are,\nnamely single codon insertions and deletions and single nucleotide indels that are extendable. \n=#\nMoveset(ref_insertions = (codon_indel,frm_indel), ref_deletions = (codon_indel, frm_indel))\n\n\n\n\n\n","category":"type"},{"location":"api/#SeededAlignment.Moveset","page":"API Reference","title":"SeededAlignment.Moveset","text":"Moveset{X,Y}(; ref_insertions::NTuple{X,Move}, ref_deletions::NTuple{Y,Move})\n\nRepresents a collection of Move instances that are either insertions or deletions\n\nExtended Help\n\nFields\n\n-vert_moves::NTuple{X,Move}: insertions relative to reference - gap operation in top/first provided sequence  -hor_moves::NTuple{Y,Move}: deletions relative to reference - gap operations in left/second provided sequence \n\nExamples\n\ncodon moveset with no frameshifts\n\n# represents codon insertion or codon deletion\ncodon_indel = RefMove(score=1.0)\n#= passing to moveset solidifies what the allowed alignment operations are,\nnamely single codon insertions and deletions. \n=#\nms = Moveset(ref_insertions = (codon_indel,), ref_deletions = (codon_indel,))\n\ncodon moveset with frameshift moves allowed\n\n# represents codon insertion or codon deletion\ncodon_indel = RefMove(score=-1.0)\n# represents frameshift causing insertion or deletion\nfrm_indel = FrameshiftMove(score=-1.5, step_length=1, extendable=true)\n#= passing to moveset solidifies what the allowed alignment operations are,\nnamely single codon insertions and deletions and single nucleotide indels that are extendable. \n=#\nms = Moveset(ref_insertions = (codon_indel,frm_indel), ref_deletions = (codon_indel, frm_indel))\n\n\n\n\n\n","category":"type"},{"location":"api/#SeededAlignment.ScoringScheme","page":"API Reference","title":"SeededAlignment.ScoringScheme","text":"ScoringScheme(;\n\textension_score::Float64=-0.3,\n\tkmer_length::Int64=18,\n\tedge_ext_begin::Bool=true,\n\tedge_ext_end::Bool=true,\n\tnucleotide_match_score::Float64 = 0.0,\n\tnucleotide_mismatch_score::Float64 = -0.8,\n\tnucleotide_score_matrix::Union{Nothing,Matrix{Float64}} = nothing\n\tcodon_match_bonus_score::Float64 = 6.0\n\n)\n\nScoringScheme defines how matches, mismatches, and partially how  gaps are scored during sequence alignment. Beyond alignment operations governed by Moveset it encompasses everything else we can customize about the alignment process. \n\nThis struct is typically passed to functions like seed_chain_align, nw_align and msa_codon_align.\n\nFields\n\n-extension_score::Float64=-0.3: penalty for affinely extending a gap that is already open.  -kmer_length::Int64=18: length of seeds used in seedchainalign -edge_ext_begin=true: Whether to subsidize gaps in begining of the alignment -edge_ext_end=true: Whether to subsidize gaps in end of the alignment -nucleotide_match_score = 0.0: score awarded for matching nucleotides (has to be >= 0) -nucleotide_mismatch_score = -0.8: penalty for matching distinct nucleotides (has to be < 0) -nucleotide_score_matrix::Union{Nothing, Matrix{Float64}}: optional custom matrix for scoring nucleotide substitutions. -codon_match_bonus_score = 6.0: score awarded for matching codons\n\nexample\n\nscore_params = ScoringScheme(extension_score = -0.2, mismatch_score = -0.7) # (everything else will be keept at default values)\nA = LongDNA{4}(\"ATGATGATAA\")\nB = LongDNA{4}(\"ATGACCCGATAA\")\nseed_chain_align(A,B scoring=score_params)\n\n\n\n\n\n","category":"type"},{"location":"api/#SeededAlignment.ScoringScheme-Tuple{}","page":"API Reference","title":"SeededAlignment.ScoringScheme","text":"ScoringScheme(;\n\textension_score::Float64=-0.3,\n\tkmer_length::Int64=12,\n\tedge_ext_begin::Bool=true,\n\tedge_ext_end::Bool=true,\n\tnucleotide_match_score::Float64 = 0.0,\n\tnucleotide_mismatch_score::Float64 = -0.4,\n\tnucleotide_score_matrix::Union{Nothing,Matrix{Float64}} = nothing\n\tcodon_match_bonus_score::Float64 = 6.0\n\n)\n\nkeyword constructor for ScoringScheme with helpful default parameters. It is important to note that supplying a custom matrix for nucleotide_score_matrix might slow performance of some alignment methods.  \n\nExtended Help\n\nSlow down might occur due to allocating ScoreScheme to the heap instead of the stack since matrix{Float64} is dynamically sized. \n\nArguments\n\n-extension_score::Float64=-0.3: penalty for affinely extending a gap that is already open.  -kmer_length::Int64=18: length of seeds used in seedchainalign -edge_ext_begin=true: Whether to subsidize gaps in begining of the alignment -edge_ext_end=true: Whether to subsidize gaps in end of the alignment -nucleotide_match_score = 0.0: score awarded for matching nucleotides (has to be >= 0) -nucleotide_mismatch_score = -0.8: penalty for matching distinct nucleotides (has to be < 0) -nucleotide_score_matrix::Union{Nothing, Matrix{Float64}}: optional custom matrix for scoring nucleotide substitutions. -codon_match_bonus_score = 6.0: score awarded for matching codons\n\nReturns\n\n-ScoringScheme\n\nexample\n\n```julia scoreparams = ScoringScheme(extensionscore = -0.2, mismatchscore = -0.7) # (everything else will be keept at default values) A = LongDNA{4}(\"ATGATGATAA\") B = LongDNA{4}(\"ATGACCCGATAA\") seedchainalign(A,B scoring=scoreparams)\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.clean_frameshifts-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API Reference","title":"SeededAlignment.clean_frameshifts","text":"clean_frameshifts(aligned_ref::LongDNA{4}, aligned_seq::LongDNA{4}; verbose::Bool=false)\n\n(clean_frameshifts - cleans pairwise alignments of frameshifts)\n\nTakes a global pairwise alignment of a CDS anchor/reference aligned_ref and a CDS that may contain frameshift errors aligned_seq, and removes frameshift mutations  which don't respect the reference's reading frame in the alignment. This is done by removing insertions from the alignment or inserting  ambigious nucleotides into deletions.\n\nExtended Help\n\nArguments\n\naligned_ref::LongDNA{4}: aligned anchored trusted CDS which decides the reading frame coordinates in the alignment\naligned_seq::LongDNA{4}: aligned CDS (with possible frameshifts due to e.g. sequencing or annotation errors) which is aligned to ref and adopts its reading frame coordinates\nverbose::Bool: Whether to verbosely display what edits were made during the cleaning of frameshifts\n\nReturns\n\nTuple{LongDNA{4},LongDNA{4}}: Cleaned global pairwise alignment that represents a protein alignment on a nucleotide level \n\nExamples\n\n1. insertion\nref: ATG-AACGTA  -> cleaned_ref: ATGAACGTA \nseq: ATGTAACGTA  -> cleaned_seq: ATGAACGTA\n\n2. deletion\nref: ATGAACGTA  -> cleaned_ref: ATGAACGTA\nseq: ATG-ACGTA  -> cleaned_seq: ATGNACGTA\n\n3. longer deletion\nref: ATGAACGTA  -> cleaned_ref: ATGAACGTA\nseq: AT-----TA  -> cleaned_seq: ATN---NTA\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.clean_frameshifts-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vector{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.clean_frameshifts","text":"clean_frameshifts(aligned_ref::LongDNA{4}, aligned_seqs::Vector{LongDNA{4}})\n\n(clean_frameshifts - cleans multiple sequence alignments of frameshifts)\n\nClean a multiple sequence alignment provided one of the sequence is a reference sequence. This is done by projecting the multiple sequence alignment to  a collection of pairwise alignments relative to the reference aligned_ref; cleaning those and then scaffolding the results to recover a cleaned multiple sequence alignment.\n\nExtended Help\n\nArguments\n\naligned_ref::LongDNA{4}: aligned anchored trusted CDS which decides the reading frame coordinates in the alignment\naligned_seqs::LongDNA{4}: aligned coding sequences (with possible frameshifts due to e.g. sequencing or annotation errors) which are aligned to ref and adopts its reading frame coordinates\nverbose::Bool: Whether to verbosely display what edits were made during the cleaning of frameshifts\n\nReturns\n\ncleaned_msa::Vector{LongDNA{4}}: a frameshift-free multiple sequence alignment\n\nExample\n\naligned_seqs = Vector{LongDNA{4}}(undef, 4)\n# original unclean msa\n            aligned_ref =     LongDNA{4}(\"ATG---TTTCCCGGGT-AA\")\n            aligned_seqs[1] = LongDNA{4}(\"-TG------CCCGGGT-A-\")\n            aligned_seqs[2] = LongDNA{4}(\"ATGAAATTTCCCGGGT-AA\")\n            aligned_seqs[3] = LongDNA{4}(\"ATGAAA----CCGGGT-AA\")\n            aligned_seqs[4] = LongDNA{4}(\"ATG---TTTCCCGGGTTAA\")\n# produce clean msa\ncleaned_msa = clean_frameshifts(aligned_ref, aligned_seqs)\n#= results\n            cleaned_msa[1] = LongDNA{4}(\"ATG---TTTCCCGGGTAA\") # ref sequence\n            cleaned_msa[2] = LongDNA{4}(\"NTG------CCCGGGTAN\")\n            cleaned_msa[3] = LongDNA{4}(\"ATGAAATTTCCCGGGTAA\")\n            cleaned_msa[4] = LongDNA{4}(\"ATGAAA---NCCGGGTAA\")\n            cleaned_msa[5] = LongDNA{4}(\"ATG---TTTCCCGGGTAA\")\n\n=#\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.msa_codon_align-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vector{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.msa_codon_align","text":"msa_codon_align(ref::LongDNA{4}, seqs::Vector{LongDNA{4}}; moveset::Moveset=STD_CODON_MOVESET, scoring::ScoringScheme=STD_SCORING, codon_scoring_on=true::Bool)\n\nComputes a visual global MSA (multiple Sequence alignment) of coding sequences based on pairwise alignments to a trusted CDS reference ref used as an anchor to  determine the apprioate reading frame coordinates for the other coding sequences (which may contain frameshift errors). Possible frameshifts errors in the  pairwise alignments are cleaned up and then scaffolded to create a multiple sequence alignment. This is done by left-stacking codon insertions relative to  the reference. \n\nNote that this doesn't qualify as a proper multiple sequence alignment in the traditional sense since the aligned sequences are only scored as being  aligned against the reference sequnece and not each other. \n\nEven so, it can still provides a useful visualization or approximation for a protein multiple sequence alignment on a nucleotide level. \n\nExtended Help\n\nArguments\n\nref::LongDNA{4}: Anchored trusted CDS which decides the reading frame coordinates in the alignment\nseqs::Vector{LongDNA{4}}: Coding Sequences (with possible frameshifts due to e.g. sequencing or annotation errors) which are aligned to ref and adopts its reading frame coordinates. \nmoveset::Moveset=STD_CODON_MOVESET: Defines allowable alignment moves (e.g., codon insertions/deletions).\nscoring::ScoringScheme=STD_SCORING: The scoring scheme used during alignment.\ncodon_scoring_on::Bool=true: Whether to apply additional scoring on codon-level \n\nReturns\n\nmsa::Vector{LongDNA{4}}: a frameshift-free multiple sequence alignment\n\nExample\n\ncodon alignment with no frameshifts present in inputs \n\nref =  LongDNA{4}(\"ATGTTTCCCGGGTAA\")\nseq1 = LongDNA{4}(\"ATGTTTTTTCCCGGGTAA\")\nseq2 = LongDNA{4}(\"ATGATGTTTTTTCCCGGGTAAGGG\")\nseq3 = LongDNA{4}(\"ATGCCCGGG\")\n\nmsa = msa_codon_align(ref, [seq1,seq2,seq3])\n#= alignment results:\n\nmsa[1] == LongDNA{4}(\"---ATG---TTTCCCGGGTAA---\")\nmsa[2] == LongDNA{4}(\"---ATGTTTTTTCCCGGGTAA---\")\nmsa[3] == LongDNA{4}(\"ATGATGTTTTTTCCCGGGTAAGGG\")\nmsa[4] == LongDNA{4}(\"---ATG------CCCGGG------\")\n\n=#\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.nw_align-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API Reference","title":"SeededAlignment.nw_align","text":"nw_align(A::LongDNA{4}, B::LongDNA{4}; moveset::Moveset=STD_NOISY_MOVESET, scoring::ScoringScheme=STD_SCORING)\n\n(Needleman-wunsch wrapper - DE-NOVO)\n\nComputes an optimal global pairwise alignment of the two ungapped DNA sequences A and B. This is done purely semantically without any awareness of protein encoding.\n\nExtended Help\n\nArguments\n\nA::LongDNA{4}: 1st DNA sequence to be aligned\nB::LongDNA{4}: 2nd DNA sequence to be aligned\nmoveset::Moveset=STD_NOISY_MOVESET: Defines allowable alignment moves (e.g. insertions/deletions and their penalty)\nscoring::ScoreScheme=STD_SCORING: Defines alignment scoring together with moveset\n\nReturns\n\nTuple{LongDNA{4},LongDNA{4}}: Tuple representation of pairwise alignment of DNA sequences A and B.\n\nExamples\n\nA = LongDNA{4}(\"AATGCTC\")\nB = LongDNA{4}(\"ACATGTC\")\n# produce alignment \nalignment = nw_align(A, B)\nprintln(alignment)\n#= resulting alignment:\n\nalignment = (\n\tLongDNA{4}(\"A-ATGCTC\"), \n\tLongDNA{4}(\"ACATG-TC\")\n)\n\n=#\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.nw_align-Tuple{}","page":"API Reference","title":"SeededAlignment.nw_align","text":"nw_align(; \n    \tref::LongDNA{4}, \n    \tquery::LongDNA{4}, \n    \tmoveset::Moveset = STD_CODON_MOVESET, \n    \tscoring::ScoringScheme = STD_SCORING,\n    \tcodon_scoring_on::Bool = false,\n    \tdo_clean_frameshifts::Bool = true, \n    \tverbose::Bool = false)\n\n(Needleman-wunsch wrapper - CODING given trusted CDS anchor/reference)\n\nProduces an optimal global pairwise alignment of two ungapped CDS (Coding DNA Sequences) ref and query by using an ref as an anchor to determine the apprioate reading frame coordinates for query. \n\nExtended Help\n\nArguments\n\nref::LongDNA{4}: Anchored trusted CDS which decides the reading frame coordinates in the alignment\nquery::LongDNA{4}: CDS (with possible frameshifts due to e.g. sequencing or annotation errors) which is aligned to ref and adopts its reading frame coordinates. \nmoveset::Moveset = STD_CODON_MOVESET: Defines allowable alignment moves (e.g. insertions/deletions and their penalty)\nscoring::ScoringScheme = STD_SCORING: Defines alignment scoring together with moveset\ncodon_scoring_on::Bool = false: Whether to apply additional scoring on codon-level \ndo_clean_frameshifts::Bool = true: Whether to clean the alignment output of gaps which cause frameshifts (IMPORTANT: produces a protein alignment on a nucleotide level)\nverbose::Bool = false: Whether to verbosely display what edits were made during the cleaning of frameshifts. \n\nReturns\n\nTuple{LongDNA{4},LongDNA{4}}: Tuple representation of pairwise alignment of DNA sequences ref and query. \n\nNote that this represents a protein alignment on a nucleotide level if (do_clean_frameshifts == true).\n\nExamples\n\nanchor_CDS =    LongDNA{4}(\"ATGCCAGTA\")\n# untrusted_CDS may contain some frameshift errors due to e.g. sequencing or annotation errors.\nuntrusted_CDS = LongDNA{4}(\"ATGTA\") \n# frameshift errors are removed from the cleaned alignment\ncleaned_CDS_alignment = nw_align(ref=anchor_CDS, query=untrusted_CDS, clean_frameshifts=true)\nprintln(cleaned_CDS_alignment)\n#= resulting alignment:\n\ncleaned_CDS_alignment = (\n\tLongDNA{4}(\"ATGCCAGTA\"), \n\tLongDNA{4}(\"ATG---NTA\")\n)\nHere 'N' denotes ambigious nucleotide.\n=#\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.read_fasta-Tuple{String}","page":"API Reference","title":"SeededAlignment.read_fasta","text":"read_fasta(filepath::String)\n\nReads in a fasta file and returns a tuple of (seqnames, seqs).\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.seed_chain_align-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API Reference","title":"SeededAlignment.seed_chain_align","text":"seed_chain_align(A::LongDNA{4}, B::LongDNA{4}; moveset::Moveset=STD_NOISY_MOVESET, scoring::ScoringScheme=STD_SCORING)\n\n(SeededAlignment wrapper - DE-NOVO)\n\nComputes a heuristically guided global pairwise alignment of two ungapped DNA sequence A and B based on seeding heuristic. The seeds are then joined together  by computing an optimal partial alignment between seeds with the Needleman-Wunsch algorithm (nw_align). Optimal in this context meaning with repect to the choosen Moveset and ScoringScheme.\n\nThe advantage of this method is that it is much faster than nw_align and produces similar results for most usecases. \n\nExtended Help\n\nArguments\n\nA::LongDNA{4}: 1st DNA sequence to be aligned\nB::LongDNA{4}: 2nd DNA sequence to be aligned\nmoveset::Moveset=STD_NOISY_MOVESET: Defines allowable alignment moves (e.g. insertions/deletions and their penalty)\nscoring::ScoreScheme=STD_SCORING: Defines alignment scoring together with moveset\n\nReturns\n\nTuple{LongDNA{4},LongDNA{4}}: Tuple representation of pairwise alignment of DNA sequences A and B.\n\nExample\n\n# input sequences with no reading frame assumed\nA = LongDNA{4}(\"AATGCTC\")\nB = LongDNA{4}(\"ACATGTC\")\n# produce alignment\nalignment = seed_chain_align(A, B)\nprintln(alignment)\n#= resulting alignment\nalignment = (\n\tLongDNA{4}(\"A-ATGCTC\"), \n\tLongDNA{4}(\"ACATG-TC\")\n)\n=#\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.seed_chain_align-Tuple{}","page":"API Reference","title":"SeededAlignment.seed_chain_align","text":"seed_chain_align(; \n    \tref::LongDNA{4}, \n    \tquery::LongDNA{4}, \n    \tmoveset::Moveset = STD_CODON_MOVESET, \n    \tscoring::ScoringScheme = STD_SCORING,\n    \tcodon_scoring_on::Bool = false,\n    \tdo_clean_frameshifts::Bool = true, \n    \tverbose::Bool = false)\n\n(SeededAlignment wrapper - CODING given trusted CDS anchor/reference)\n\nComputes a heuristically guided global pairwise alignment of two ungapped CDS (Coding DNA Sequences) ref and query by using ref as an anchor to determine the apprioate reading frame coordinates for query and using a seeding heuristic for speedup. The seeds are then joined together by computing an optimal partial alignment between  seeds with the Needleman-Wunsch algorithm (nw_align). Optimal in this context means optimal with repect to the choosen Moveset and ScoringScheme.\n\nThe advantage of this method is that it is much faster than nw_align and produces similar results for most usecases. \n\nExtended Help\n\nArguments\n\nref::LongDNA{4}: Anchored trusted CDS which decides the reading frame coordinates in the alignment\nquery::LongDNA{4}: CDS (with possible frameshifts due to e.g. sequencing errors) which is aligned to ref and adopts its reading frame coordinates. \nmoveset::Moveset = STD_CODON_MOVESET: Defines allowable alignment moves (e.g. insertions/deletions and their penalty)\nscoring::ScoringScheme = STD_SCORING: Defines alignment scoring together with moveset\ncodon_scoring_on::Bool = false: Whether to apply additional scoring on codon-level \ndo_clean_frameshifts::Bool = true: Whether to clean the alignment output of gaps which cause frameshifts - this produces a protein alignment on a nucleotide level. \nverbose::Bool = false: Whether to verbosely display what edits were made during the cleaning of frameshifts. \n\nReturns\n\nTuple{LongDNA{4},LongDNA{4}}: Tuple representation of pairwise alignment of DNA sequences ref and query. \n\nNote that this represents a protein alignment on a nucleotide level if (do_clean_frameshifts == true).\n\nExample\n\nanchor_CDS =    LongDNA{4}(\"ATGCCAGTA\")\n# untrusted_CDS may contain some frameshift errors due to e.g. sequencing or annotation errors.\nuntrusted_CDS = LongDNA{4}(\"ATGTA\") \n# frameshift errors are removed from the cleaned alignment\ncleaned_CDS_alignment = seed_chain_align(ref=anchor_CDS, query=untrusted_CDS, clean_frameshifts=true)\nprintln(cleaned_CDS_alignment)\n#= resulting alignment:\n\ncleaned_CDS_alignment = (\n\tLongDNA{4}(\"ATGCCAGTA\"), \n\tLongDNA{4}(\"ATG---NTA\")\n)\nHere 'N' denotes ambigious nucleotide.\n=#\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.write_fasta-Tuple{String, Vector{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.write_fasta","text":"write_fasta(filepath::String, sequences::Vector{LongDNA{4}}; seq_names = nothing)\n\nWrites a fasta file from a vector of sequences, with optional seq_names.\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.write_fasta-Union{Tuple{N}, Tuple{String, NTuple{N, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}} where N","page":"API Reference","title":"SeededAlignment.write_fasta","text":"write_fasta(filepath::String, sequences::Tuple{LongDNA{4},LongDNA{4}}; seq_names = nothing)\n\nWrites a fasta file from a Tuple of sequences, with optional seq_names.\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.STD_CODON_MOVESET","page":"API Reference","title":"SeededAlignment.STD_CODON_MOVESET","text":"STD_CODON_MOVESET\n\nConstants that represents the default codon moveset with frameshift moves allowed\n\ndefault parameter values\n\n# the tuple becomes both insertions and deletions in the moveset\nconst STD_CODON_MOVESET = Moveset(\n    (\n        Move(ref=false, step_length=1, score=-2.0, extendable=true),\n        Move(ref=true,  step_length=3, score=-1.0, extendable=true)\n    )\n)\n\n\n\n\n\n","category":"constant"},{"location":"api/#SeededAlignment.STD_NOISY_MOVESET","page":"API Reference","title":"SeededAlignment.STD_NOISY_MOVESET","text":"STD_NOISY_MOVESET\n\nConstants that represents codon oblivious moveset that favors gaps of 3. \n\ndefault parameter values\n\n# the tuple becomes both insertions and deletions in the moveset\nconst STD_NOISY_MOVESET = Moveset(\n    (\n        Move(ref=false, step_length=1, score=-2.0, extendable=true),\n        Move(ref=true,  step_length=3, score=-1.0, extendable=true)\n    )\n)\n\n\n\n\n\n","category":"constant"},{"location":"api/#SeededAlignment.STD_SCORING","page":"API Reference","title":"SeededAlignment.STD_SCORING","text":"STD_SCORING\n\nconstant ScoreScheme that stores the default scoring parameters used in alignment methods.\n\ndefault parameter values\n\nconst STD_SCORING = ScoringScheme(\n\textension_score=-0.3,\n\tkmer_length=12,\n\tedge_ext_begin=true,\n\tedge_ext_end=true,\n\tnucleotide_mismatch_score = -0.8,\n\tnucleotide_match_score = 0.0,\n\tcodon_match_bonus_score = 6.0\n)\n\n\n\n\n\n\n","category":"constant"},{"location":"customizing_alignments/#Customizing-Alignments","page":"Customizing Alignments","title":"Customizing Alignments","text":"","category":"section"},{"location":"customizing_alignments/","page":"Customizing Alignments","title":"Customizing Alignments","text":"Coming Soon!","category":"page"},{"location":"#SeededAlignment.jl","page":"Home","title":"SeededAlignment.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SeededAlignment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is a complement to the README on GitHub which explains the purpose, installation, core methods, use cases, and examples in detail. These pages are mainly intended for users who want to consult to the API Reference, or advanced users who want to learn how to define their own alignment operations and scoring.  ","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Getting Started (README)    Installation, basic usage, and overview of the package's goals.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Customizing Alignments    How to define custom scoring schemes, alignment operations, and seed constraints.","category":"page"},{"location":"","page":"Home","title":"Home","text":"API Reference    Full list of exported types and functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For issues, feature requests, or contributions, see the GitHub repository.","category":"page"}]
}
