var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section provides detailed documentation for all exported types and functions in SeededAlignment.jl.","category":"page"},{"location":"api/#Core-Methods","page":"API Reference","title":"Core Methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"seed_chain_align \nmsa_codon_align \nclean_frameshifts\nnw_align","category":"page"},{"location":"api/#Utilities","page":"API Reference","title":"Utilities","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"methods for reading and writing of sequence data in FASTA format.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"read_fasta\nwrite_fasta","category":"page"},{"location":"api/#Core-Types","page":"API Reference","title":"Core Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Move\nMoveset\nScoringScheme\nLongDNA{4}","category":"page"},{"location":"api/#Standard-Parameters","page":"API Reference","title":"Standard Parameters","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"std_scoring\nstd_codon_moveset\nstd_noisy_moveset","category":"page"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"A complete alphabetical listing of all documented functions.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"api/#Index-Docstrings","page":"API Reference","title":"Index Docstrings","text":"","category":"section"},{"location":"api/#SeededAlignment.ScoringScheme","page":"API Reference","title":"SeededAlignment.ScoringScheme","text":"ScoringScheme(; match_score=0.0, mismatch_score=0.5,extension_score=0.1,edge_ext_begin=true,edge_ext_end=true,kmerlength=21)\n\nA struct for storing scoring parameters used for sequence alignment. Uses a keyword constructor. \n\nFields\n\nmatch_score::Float64: Score (typically â‰¤ 0) awarded for matching nucleotide. Lower is better.\nmismatch_score::Float64: Penalty for nucleotide mismatches. Higher values penalize substitutions more strongly.\nextension_score::Float64: Cost to extend a gap (indel). Affects how gaps are penalized during alignment.\nedge_ext_begin::Bool: If true, allows gaps to be extended at the beginning of sequences.\nedge_ext_end::Bool: If true, allows gaps to be extended at the end of sequences.\nkmerlength::Int64: Length of k-mers used for seeding alignments (if applicable). Ignored if no seeding is used.\n\nDescription\n\nScoringScheme defines how matches, mismatches, and gaps are scored during nucleotide-level sequence alignment. \n\nThis struct is typically passed to functions like seed_chain_align or msa_codon_align.\n\nexample\n\nscore_params = ScoringScheme(extension_score = 0.3, mismatch_score = 0.7) # (everything else will be keept at default values)\n\n\n\n\n\n","category":"type"},{"location":"api/#SeededAlignment.clean_frameshifts-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API Reference","title":"SeededAlignment.clean_frameshifts","text":"clean_frameshifts(aligned_ref::LongDNA{4},aligned_seq::LongDNA{4}; verbose::Bool=false)\n\nTakes a pairwise alignment of a reference (with known reading frame) and a sequence, and removes frameshift mutations  which don't respect the reference's reading frame. This is done by removing insertions from the alignment or inserting  ambigious nucleotides into deletions.\n\nExamples:\n\ninsertion\n\nref: ATG-AACGTA  -> cleanedref: ATGAACGTA  seq: ATGTAACGTA  -> cleanedseq: ATGAACGTA\n\ndeletion\n\nref: ATGAACGTA  -> cleanedref: ATGAACGTA seq: ATG-ACGTA  -> cleanedseq: ATGNACGTA\n\nNOTE We always assume the readingFrame is 1\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.clean_frameshifts-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vector{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.clean_frameshifts","text":"clean a multiple sequence alignment provided one of the sequence is a reference sequence\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.msa_codon_align-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, Vector{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.msa_codon_align","text":"msa_codon_align(ref::LongDNA{4}, seqs::Vector{LongDNA{4}}; moveset::Moveset=STD_CODON_MOVESET, scoring::ScoringScheme=STD_SCORING, \n    codon_scoring_on=true::Bool, use_seeded=true::Bool)\n\nemm idk...\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.nw_align-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API Reference","title":"SeededAlignment.nw_align","text":"nw_align(A::LongDNA{4},B::LongDNA{4}; moveset::Moveset=STD_NOISY_MOVESET, scoring::ScoringScheme=STD_SCORING\n\nNeedleman_Wunsch wrapper - no reference, i.e. makes no assumptions about the two sequences. \n\nComputes an optimal global pairwise alignment of two ungapped LongDNA{4} sequence   with respect to the Moveset and the ScoringScheme. \n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.nw_align-Tuple{}","page":"API Reference","title":"SeededAlignment.nw_align","text":"nw_align(; ref::LongDNA{4}, query::LongDNA{4}, moveset::Moveset=STD_CODON_MOVESET, scoring::ScoringScheme=STD_SCORING,\n    do_clean_frameshifts=false::Bool, verbose=false::Bool, codon_scoring_on=true::Bool)\n\nNeedleman_Wunsch wrapper - reference informed, i.e. assumes one of the sequence has intact reading frame. \n\nOptimally aligns a query sequence to a ref sequence using a codon-aware Moveset and ScoringScheme.\n\nNOTE We always assume the readingFrame is 1\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.read_fasta-Tuple{String}","page":"API Reference","title":"SeededAlignment.read_fasta","text":"read_fasta(filepath::String)\n\nReads in a fasta file and returns a tuple of (seqnames, seqs).\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.seed_chain_align-Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}","page":"API Reference","title":"SeededAlignment.seed_chain_align","text":"seed_chain_align(A::LongDNA{4},B::LongDNA{4}; moveset::Moveset=STD_NOISY_MOVESET, scoring::ScoringScheme=STD_SCORING\n\nseedchainalign wrapper - no reference, i.e. makes no assumptions about the two sequences. \n\nComputes a heuristically guided global pairwise alignment of two ungapped LongDNA{4} sequence based on seeding. The seeds are then joined together  by doing a partial alignment with nw_align between seeds optimally with repect to the Moveset and ScoringScheme.\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.seed_chain_align-Tuple{}","page":"API Reference","title":"SeededAlignment.seed_chain_align","text":"seed_chain_align(; ref::LongDNA{4}, query::LongDNA{4}, moveset::Moveset=STD_CODON_MOVESET, scoring::ScoringScheme=STD_SCORING,\n    do_clean_frameshifts=false::Bool, verbose=false::Bool, codon_scoring_on=true::Bool)\n\nseedchainalign wrapper - reference informed, i.e. assumes one of the sequence has intact reading frame. \n\nHeuristically aligns a query sequence to a ref sequence based on seeding. The seeds are then joined together  by doing a partial alignment with nw_align between seeds optimally with repect to a codon-aware Moveset and ScoringScheme.\n\nNOTE We always assume the readingFrame is 1\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.write_fasta-Tuple{String, Tuple{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}, BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.write_fasta","text":"write_fasta(filepath::String, sequences::Tuple{LongDNA{4},LongDNA{4}}; seq_names = nothing)\n\nWrites a fasta file from a Tuple of sequences, with optional seq_names.\n\n\n\n\n\n","category":"method"},{"location":"api/#SeededAlignment.write_fasta-Tuple{String, Vector{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}}","page":"API Reference","title":"SeededAlignment.write_fasta","text":"write_fasta(filepath::String, sequences::Vector{LongDNA{4}}; seq_names = nothing)\n\nWrites a fasta file from a vector of sequences, with optional seq_names.\n\n\n\n\n\n","category":"method"},{"location":"customizing_alignments/#Customizing-Alignments","page":"Customizing Alignments","title":"Customizing Alignments","text":"","category":"section"},{"location":"customizing_alignments/","page":"Customizing Alignments","title":"Customizing Alignments","text":"Coming Soon!","category":"page"},{"location":"#SeededAlignment.jl","page":"Home","title":"SeededAlignment.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SeededAlignment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation is a complement to the README on GitHub which explains the purpose, installation, core methods, use cases, and examples in detail. These pages are mainly intended for users who want to consult to the API Reference, or advanced users who want to learn how to define their own alignment operations and scoring.  ","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Getting Started (README)    Installation, basic usage, and overview of the package's goals.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Customizing Alignments    How to define custom scoring schemes, alignment operations, and seed constraints.","category":"page"},{"location":"","page":"Home","title":"Home","text":"API Reference    Full list of exported types and functions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For issues, feature requests, or contributions, see the GitHub repository.","category":"page"}]
}
